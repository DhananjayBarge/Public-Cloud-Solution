{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "networkInterfaceNameNginx": {
            "type": "string"
        },
        "networkSecurityGroupName": {
            "type": "string"
        },
        "networkSecurityGroupRules": {
            "type": "array"
        },
        "subnetNamePub": {
            "type": "string"
        },
        "virtualNetworkName": {
            "type": "string"
        },
        "addressPrefixes": {
            "type": "array"
        },
        "subnets": {
            "type": "array"
        },
        "publicIpAddressName": {
            "type": "string"
        },
        "publicIpAddressType": {
            "type": "string"
        },
        "publicIpAddressSku": {
            "type": "string"
        },
        "virtualMachineNameNginx": {
            "type": "string"
        },
        "osDiskType": {
            "type": "string"
        },
        "osDiskDeleteOption": {
            "type": "string"
        },
        "nicDeleteOption": {
            "type": "string"
        },
        "adminUsername": {
            "type": "string"
        },
        "adminPassword": {
            "type": "secureString"
        },
        "customDataNginx": {
            "type": "secureString"
        },
        "rgLocation": {
            "type": "string"
        },
        "vmSizeNginx": {
            "type": "string"

        },
        "bastion-host-name": {
            "type": "string",
            "metadata": {
                "description": "Name of Azure Bastion resource"
            }
        },
        "bastion-subnet-ip-prefix": {
            "type": "string",
            "defaultValue": "10.1.1.0/26",
            "metadata": {
                "description": "Bastion subnet IP prefix MUST be within vnet IP prefix address space"
            }
        },
        "subscriptionId": {
            "type": "string"
        },
        "name_app": {
            "type": "string"
        },
        "hostingPlanName": {
            "type": "string"
        },
        "alwaysOn": {
            "type": "bool"
        },
        "sku": {
            "type": "string"
        },
        "skuCode": {
            "type": "string"
        },
        "workerSize": {
            "type": "string"
        },
        "workerSizeId": {
            "type": "string"
        },
        "numberOfWorkers": {
            "type": "string"
        },
        "linuxFxVersion": {
            "type": "string"
        },
        "name_db": {
            "type": "string"
        },
        "defaultExperience_db": {
            "type": "string"
        },
        "environment": {
            "type": "string",
            "allowedValues": [
              "test",
              "acceptence",
              "production"
            ]
        },
        "platformFaultDomainCount": {
            "type": "string"
        },
        "autoScaleDefault": {
            "type": "string"
        },
        "autoScaleMin": {
            "type": "string"
        },
        "autoScaleMax": {
            "type": "string"
        },
        "scaleOutCPUPercentageThreshold": {
            "type": "string"
        },
        "durationTimeWindow": {
            "type": "string"
        },
        "scaleOutInterval": {
            "type": "string"
        },
        "scaleInCPUPercentageThreshold": {
            "type": "string"
        },
        "scaleInInterval": {
            "type": "string"
        },
        "vmssName": {
            "type": "string",
            "metadata": {
                "description": "String used as a base for naming resources (9 characters or less). A hash is prepended to this string for some resources, and resource-specific information is appended."
            }
        },
        "instanceCount": {
            "type": "int",
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 3,
            "metadata": {
                "description": "Number of VM instances (3 or less)."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {}
        },
        "rgName": {
            "type": "string"
        },
        "publicIpAddressNameBastion": {
            "type": "string"
        },
        "dataFactoryName": {
            "type": "string",
            "defaultValue": "[format('datafactory{0}', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Data Factory Name"
            }
        },
        "storageAccountName": {
            "type": "string",
            "defaultValue": "[format('storage{0}', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Name of the Azure storage account that contains the input/output data."
                }
        },
        "blobContainerName": {
            "type": "string",
            "defaultValue": "[format('blob{0}', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Name of the blob container in the Azure Storage account."
            }
        },
        "privateEndpoint_name": {
            "type": "string",
            "metadata":{
                "description": "Name of your Private Endpoint"
            }
        },
        "privateLinkConnection_name": {
            "type": "string",
            "metadata":{
                "description": "Link name between your Private Endpoint and your Web App"
            }
        },
        "privateDNSZone_name": {
            "type": "string",
            "defaultValue": "privatelink.azurewebsites.net",
            "metadata":{
                "description": "Name must be privatelink.azurewebsites.net"
            }
        },
    },
    "variables": {
        "vnetId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
        "subnetRefPub": "[concat(variables('vnetId'), '/subnets/', parameters('subnetNamePub'))]",
        "nsg-name": "[concat(parameters('environment'), parameters('bastion-host-name'),'-nsg')]",
        "bastion-subnet-name": "AzureBastionSubnet",
        "loadBalancerName": "[concat (parameters('vmssName'), '-lb')]",
        "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('publicIPAddressName'))]",
        "bePoolName": "[concat(parameters('vmssName'), '-bepool')]",
        "loadBalancerFrontEndName": "[concat(parameters('environment'), '-LoadBalancerFrontEnd')]",
        "loadBalancerProbeName": "[concat(parameters('environment'), '-loadBalancerHttpProbe')]",
        "vmssId": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('vmssName'))]",
        "lbSkuName": "Standard",
        "networkApiVersion": "2020-11-01",
        "virtualMachineScaleSetApiVersion": "2021-04-01",
        "autoScaleResourceName": "[concat(parameters('vmssName'), '-autoscale')]",
        "dataFactoryLinkedServiceName": "ArmtemplateStorageLinkedService",
        "dataFactoryDataSetInName": "ArmtemplateTestDatasetIn",
        "dataFactoryDataSetOutName": "ArmtemplateTestDatasetOut",
        "pipelineName": "ArmtemplateSampleCopyPipeline"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-04-01",
            "name": "[parameters('storageAccountName')]",
            "location": "[parameters('rgLocation')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2"
            },
            {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2021-04-01",
            "name": "[format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ]
            },
            {
            "type": "Microsoft.DataFactory/factories",
            "apiVersion": "2018-06-01",
            "name": "[parameters('dataFactoryName')]",
            "location": "[parameters('rgLocation')]",
            "identity": {
                "type": "SystemAssigned"
            }
            },
            {
            "type": "Microsoft.DataFactory/factories/linkedservices",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('dataFactoryLinkedServiceName'))]",
            "properties": {
                "type": "AzureBlobStorage",
                "typeProperties": {
                "connectionString": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', parameters('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value)]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ]
            },
            {
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('dataFactoryDataSetInName'))]",
            "properties": {
                "linkedServiceName": {
                "referenceName": "[variables('dataFactoryLinkedServiceName')]",
                "type": "LinkedServiceReference"
                },
                "type": "Binary",
                "typeProperties": {
                "location": {
                    "type": "AzureBlobStorageLocation",
                    "container": "[format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName'))]",
                    "folderPath": "input",
                    "fileName": "emp.txt"
                }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName')), '/')[0], split(format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName')), '/')[1], split(format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName')), '/')[2])]",
                "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', parameters('dataFactoryName'), variables('dataFactoryLinkedServiceName'))]"
            ]
            },
            {
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('dataFactoryDataSetOutName'))]",
            "properties": {
                "linkedServiceName": {
                "referenceName": "[variables('dataFactoryLinkedServiceName')]",
                "type": "LinkedServiceReference"
                },
                "type": "Binary",
                "typeProperties": {
                "location": {
                    "type": "AzureBlobStorageLocation",
                    "container": "[format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName'))]",
                    "folderPath": "output"
                }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName')), '/')[0], split(format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName')), '/')[1], split(format('{0}/default/{1}', parameters('storageAccountName'), parameters('blobContainerName')), '/')[2])]",
                "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', parameters('dataFactoryName'), variables('dataFactoryLinkedServiceName'))]"
            ]
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('pipelineName'))]",
            "properties": {
                "activities": [
                {
                    "name": "MyCopyActivity",
                    "type": "Copy",
                    "policy": {
                    "timeout": "7.00:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                    },
                    "typeProperties": {
                    "source": {
                        "type": "BinarySource",
                        "storeSettings": {
                        "type": "AzureBlobStorageReadSettings",
                        "recursive": true
                        }
                    },
                    "sink": {
                        "type": "BinarySink",
                        "storeSettings": {
                        "type": "AzureBlobStorageWriterSettings"
                        }
                    },
                    "enableStaging": false
                    },
                    "inputs": [
                    {
                        "referenceName": "[variables('dataFactoryDataSetInName')]",
                        "type": "DatasetReference"
                    }
                    ],
                    "outputs": [
                    {
                        "referenceName": "[variables('dataFactoryDataSetOutName')]",
                        "type": "DatasetReference"
                    }
                    ]
                }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', parameters('dataFactoryName'), variables('dataFactoryDataSetInName'))]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', parameters('dataFactoryName'), variables('dataFactoryDataSetOutName'))]"
            ]
        },
        {
            "apiVersion": "2020-07-01",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsg-name')]",
            "location": "[parameters('rgLocation')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowHttpsInBound",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "Internet",
                            "destinationPortRange": "443",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowGatewayManagerInBound",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "GatewayManager",
                            "destinationPortRange": "443",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowLoadBalancerInBound",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "destinationPortRange": "443",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowBastionHostCommunicationInBound",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationPortRanges": [
                                "8080",
                                "5701"
                            ],
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 130,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationPortRange": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowSshRdpOutBound",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationPortRanges": [
                                "22",
                                "3389"
                            ],
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowAzureCloudCommunicationOutBound",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationPortRange": "443",
                            "destinationAddressPrefix": "AzureCloud",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowBastionHostCommunicationOutBound",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationPortRanges": [
                                "8080",
                                "5701"
                            ],
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowGetSessionInformationOutBound",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "destinationPortRanges": [
                                "80",
                                "443"
                            ],
                            "access": "Allow",
                            "priority": 130,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "name": "[parameters('publicIpAddressNameBastion')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2019-02-01",
            "location": "[parameters('rgLocation')]",
            "properties": {
                "publicIpAllocationMethod": "[parameters('publicIpAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "bastion34567"
                }
            },
            "sku": {
                "name": "[parameters('publicIpAddressSku')]"
            },
            "tags": "[parameters('tags')]"
        },
        {
          "type": "Microsoft.Network/loadBalancers",
          "apiVersion": "2020-06-01",
          "name": "[variables('loadBalancerName')]",
          "location": "[parameters('rgLocation')]",
          "sku": {
              "name": "[variables('lbSkuName')]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
          ],
          "properties": {
            "frontendIPConfigurations": [
              {
                "name": "[variables('loadBalancerFrontEndName')]",
                "properties": {
                  "publicIPAddress": {
                    "id": "[variables('publicIPAddressID')]"
                  }
                }
              }
            ],
            "backendAddressPools": [
              {
                "name": "[variables('bePoolName')]"
              }
            ],
            "loadBalancingRules": [
              {
                "name": "roundRobinLBRule",
                "properties": {
                  "frontendIPConfiguration": {
                    "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('loadBalancerName'), variables('loadBalancerFrontEndName'))]"
                  },
                  "backendAddressPool": {
                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerName'), variables('bePoolName'))]"
                  },
                  "protocol": "Tcp",
                  "frontendPort": 80,
                  "backendPort": 80,
                  "enableFloatingIP": false,
                  "idleTimeoutInMinutes": 5,
                  "probe": {
                    "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerName'), variables('loadBalancerProbeName'))]"
                  }
                }
              }
            ],
            "probes": [
              {
                "name": "[variables('loadBalancerProbeName')]",
                "properties": {
                  "protocol": "Tcp",
                  "port": 80,
                  "intervalInSeconds": 5,
                  "numberOfProbes": 2
                }
              }
            ]
          },
          "tags": "[parameters('tags')]"
        },
        
        {
            "type": "Microsoft.Insights/autoscaleSettings",
            "apiVersion": "2015-04-01",
            "name": "[variables('autoScaleResourceName')]",
            "location": "[parameters('rgLocation')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachineScaleSets/', parameters('vmssName'))]"
            ],
            "properties": {
                "name": "[variables('autoScaleResourceName')]",
                "targetResourceUri": "[variables('vmssId')]",
                "enabled": true,
                "profiles": [
                    {
                        "name": "Profile1",
                        "capacity": {
                            "minimum": "[parameters('autoScaleMin')]",
                            "maximum": "[parameters('autoScaleMax')]",
                            "default": "[parameters('autoScaleDefault')]"
                        },
                        "rules": [
                            {
                                "metricTrigger": {
                                    "metricName": "Percentage CPU",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[variables('vmssId')]",
                                    "timeGrain": "PT1M",
                                    "statistic": "Average",
                                    "timeWindow": "[concat('PT', parameters('durationTimeWindow'), 'M')]",
                                    "timeAggregation": "Average",
                                    "operator": "GreaterThan",
                                    "threshold": "[parameters('scaleOutCPUPercentageThreshold')]"
                                },
                                "scaleAction": {
                                    "direction": "Increase",
                                    "type": "ChangeCount",
                                    "value": "[parameters('scaleOutInterval')]",
                                    "cooldown": "PT1M"
                                }
                            },
                            {
                                "metricTrigger": {
                                    "metricName": "Percentage CPU",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[variables('vmssId')]",
                                    "timeGrain": "PT1M",
                                    "statistic": "Average",
                                    "timeWindow": "PT5M",
                                    "timeAggregation": "Average",
                                    "operator": "LessThan",
                                    "threshold": "[parameters('scaleInCPUPercentageThreshold')]"
                                },
                                "scaleAction": {
                                    "direction": "Decrease",
                                    "type": "ChangeCount",
                                    "value": "[parameters('scaleInInterval')]",
                                    "cooldown": "PT1M"
                                }
                            }
                        ]
                    }
                ]
            }
        },
        {
            "name": "[parameters('vmssName')]",
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "apiVersion": "[variables('virtualMachineScaleSetApiVersion')]",
            "location": "[parameters('rgLocation')]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsg-name'))]"
            ],
            "properties": {
                "singlePlacementGroup": false,
                "virtualMachineProfile": {
                    "storageProfile": {
                        "osDisk": {
                            "createOption": "fromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                                "storageAccountType": "[parameters('osDiskType')]"
                            }
                        },
                        "imageReference": {
                            "publisher": "canonical",
                            "offer": "0001-com-ubuntu-server-focal",
                            "sku": "20_04-lts-gen2",
                            "version": "latest"
                        }
                    },
                    "networkProfile": {
                        "networkApiVersion": "[variables('networkApiVersion')]",
                         "networkInterfaceConfigurations": [
                            {
                                "name": "[parameters('networkInterfaceNameNginx')]",
                                    "properties": {
                                        "primary": true,
                                        "enableAcceleratedNetworking": false,
                                        "ipConfigurations": [
                                            {
                                                "name": "vmssipconfig",
                                                "properties": {
                                                    "subnet": {
                                                        "id": "[variables('subnetRefPub')]"
                                                    },
                                                    "primary": true,
                                                    "loadBalancerBackendAddressPools": [
                                                        {
                                                          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerName'), variables('bePoolName'))]"
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                            }
                         ]
                      },
                    "extensionProfile": {
                        "extensions": []
                    },
                    "diagnosticsProfile": {
                        "bootDiagnostics": {
                            "enabled": true
                        }
                    },
                    "osProfile": {
                        "computerNamePrefix": "[parameters('virtualMachineNameNginx')]",
                        "adminUsername": "[parameters('adminUsername')]",
                        "adminPassword": "[parameters('adminPassword')]",
                        "linuxConfiguration": {
                            "disablePasswordAuthentication": false,
                            "patchSettings": {
                                "patchMode": "ImageDefault"
                            }
                        },
                        "customData": "[parameters('customDataNginx')]"
                    }
                },
                "orchestrationMode": "Flexible",
                "platformFaultDomainCount": "[parameters('platformFaultDomainCount')]"
            },
            "sku": {
                "name": "[parameters('vmSizeNginx')]",
                "capacity": "[int(parameters('instanceCount'))]"
            },
            "tags": "[parameters('tags')]"
        },
        {
            "name": "[parameters('networkSecurityGroupName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-02-01",
            "location": "[parameters('rgLocation')]",
            "properties": {
                "securityRules": "[parameters('networkSecurityGroupRules')]"
            }
        },
        {
            "name": "[parameters('virtualNetworkName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-11-01",
            "location": "[parameters('rgLocation')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": "[parameters('addressPrefixes')]"
                },
                "subnets": "[parameters('subnets')]"
            }
        },
        {
            "name": "[parameters('publicIpAddressName')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2019-02-01",
            "location": "[parameters('rgLocation')]",
            "properties": {
                "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
            },
            "sku": {
                "name": "[parameters('publicIpAddressSku')]"
            }
        },
        {
            "apiVersion": "2020-07-01",
            "type": "Microsoft.Network/bastionHosts",
            "name": "[parameters('bastion-host-name')]",
            "location": "[parameters('rgLocation')]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsg-name'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
                "[resourceId(parameters('rgName'), 'Microsoft.Network/publicIpAddresses', parameters('publicIpAddressName'))]"
            ],
            "sku": {
                "name": "[parameters('publicIpAddressSku')]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), variables('bastion-subnet-name'))]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses', parameters('publicIpAddressNameBastion'))]"
                            }
                        }
                    }
                ]
            },
            "tags": "[parameters('tags')]"
        },

        {
            "apiVersion": "2020-07-01",
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "name": "[concat(parameters('virtualNetworkName'), '/', variables('bastion-subnet-name'))]",
            "location": "[parameters('rgLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-name'))]"
            ],
            "properties": {
                "addressPrefix": "[parameters('bastion-subnet-ip-prefix')]",
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-name'))]"
                }
            }
        },
     {
            "apiVersion": "2018-11-01",
            "name": "[parameters('name_app')]",
            "type": "Microsoft.Web/sites",
            "location": "[parameters('rgLocation')]",
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]"
            ],
            "properties": {
                "name": "[parameters('name_app')]",
                "siteConfig": {
                    "appSettings": [],
                    "linuxFxVersion": "[parameters('linuxFxVersion')]",
                    "alwaysOn": "[parameters('alwaysOn')]"
                },
                "serverFarmId": "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('rgName'), '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                "clientAffinityEnabled": false
            }
        },
        {
            "apiVersion": "2020-12-01",
            "name": "[parameters('hostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[parameters('rgLocation')]",
            "kind": "linux",
            "tags": {
                "name": "app"
            },
            "dependsOn": [],
            "properties": {
                "name": "[parameters('hostingPlanName')]",
                "workerSize": "[parameters('workerSize')]",
                "workerSizeId": "[parameters('workerSizeId')]",
                "numberOfWorkers": "[parameters('numberOfWorkers')]",
                "reserved": true,
                "zoneRedundant": false
            },
            "sku": {
                "Tier": "[parameters('sku')]",
                "Name": "[parameters('skuCode')]"
            }
        },
        {
            "apiVersion": "2015-04-08",
            "kind": "MongoDB",
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "name": "[parameters('name_db')]",
            "location": "[parameters('rgLocation')]",
            "dependsOn": [],
            "properties": {
                "databaseAccountOfferType": "Standard",
                "locations": [
                    {
                        "id": "[concat(parameters('name_db'), '-', parameters('rgLocation'))]",
                        "failoverPriority": 0,
                        "locationName": "[parameters('rgLocation')]"
                    }
                ],
                "backupPolicy": {
                    "type": "Periodic",
                    "periodicModeProperties": {
                        "backupIntervalInMinutes": 240,
                        "backupRetentionIntervalInHours": 8,
                        "backupStorageRedundancy": "Geo"
                    }
                },
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "ipRules": [],
                "dependsOn": [],
                "enableMultipleWriteLocations": false,
                "capabilities": [
                    {
                        "name": "EnableMongo"
                    },
                    {
                        "name": "DisableRateLimitingResponses"
                    }
                ],
                "apiProperties": {
                    "serverVersion": "4.0"
                },
                "enableFreeTier": false
            },
            "tags": {
                "defaultExperience": "[parameters('defaultExperience_db')]",
                "hidden-cosmos-mmspecial": ""
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2019-04-01",
            "name": "[parameters('privateEndpoint_name')]",
            "location": "[parameters('rgLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name_app'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetNamePub'))]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "[parameters('privateLinkConnection_name')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('name_app'))]",
                            "groupIds": [
                                "sites"
                            ]
                        }
                    }
                ]
            } 
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2018-09-01",
            "name": "[parameters('privateDNSZone_name')]",
            "location": "global",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ] 
        },
        {
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "2018-09-01",
            "name": "[concat(parameters('privateDNSZone_name'), '/', parameters('privateDNSZone_name'), '-link')]",
            "location": "global",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZone_name'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2020-03-01",
            "name": "[concat(parameters('privateEndpoint_name'),'/dnsgroupname')]",
            "location": "[parameters('rgLocation')]",
            "dependsOn": [
               "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZone_name'))]",
               "[resourceId('Microsoft.Network/privateEndpoints' , parameters('privateEndpoint_name'))]"
             ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "config1",
                        "properties": {
                             "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZone_name'))]"
                        }
                    }
                ]
            }
        },
    ],
    "outputs": {
        "adminUsername": {
            "type": "string",
            "value": "[parameters('adminUsername')]"
        }
    }
}